proc space
    ->
do
    " " print
end

proc double
    int -> int
do
    2 *
end

proc doubledouble
    int int -> int int
do
    double swp
    double swp
end

asm not_equals # literally just subtraction
    int int -> int
do
    "spop rax"
    "spop rbx"
    "sub rbx, rax"
    "spush rbx"
end

104 100 not_equals println
200 200 not_equals println

10.0 2.0 * println

50 40 doubledouble print " " print println

123 print

456 println

2 3 + println

12 10 - println
12.0 10.0 - println

11 3 * println

11 2 / println

14 3 % println

10 ++ println

10 -- println

444 dup println println

4 ! println

0 ! println

0 0 && println
0 7 && println
6 7 && println

0 0 || println
2 0 || println
2 3 || println

6 7 pop println

5 while dup then --
    dup println
end pop

2 if
    9 println
end

0 if
    29 println
end

61 if
    62 println
else
    63 println
end

0 if
    64 println
else
    65 println
end

# 5 println

"strimg cheese" println

2 3 4 rot println println println

1 2 3 4 5 roll(4) roll(3) print space print space print space print space println

7 8 9 10 over(3) print space print space print space print space println

-1.0 -2.0 > println
-6.0 -3.0 > println
-1 -2 > println
-6 -3 > println

struct Point
    x flo
    y flo
end

2.0 3.0 Point .x println

proc invert
    Point -> Point
do
    dup .y swp .x Point
end

proc point_println
    Point ->
do
    "{x=" print
    dup .x print
    " y=" print
    dup .y print
    "}" println
    pop
end

7.1 9.2 Point dup invert point_println point_println
