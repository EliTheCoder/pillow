export struct list
    data int
    length int
    capacity int
end

export proc new_list
    -> list
do
    0 0 0 list
end

export proc deconstruct
    list -> int int int
do
    dup .data swp
    dup .length swp
    dup .capacity swp
    pop
end

export proc push
    list int -> list
do
    swp
    dup deconstruct
    rot pop >=
    if
        dup .capacity
        0 == if
            deconstruct
            pop 256
        else
            deconstruct
            2 *
        end
        rot
        over realloc
        rot rot
        list
    end

    deconstruct
    over(2) over(2)
    8 * +
    roll(4)
    set
    swp ++ swp
    list
end

asm realloc
    int int -> int
do
    "spop rsi"
    "spop rdi"
    "call realloc"
    "spush rax"
end

asm set
    int int ->
do
    "spop rbx"
    "spop rax"
    "mov [rax], rbx"
end

asm get
    int -> int
do
    "spop rax"
    "mov rbx, [rax]"
    "spush rbx"
end

export proc index
    list int -> int
do
    8 *
    swp .data
    + get
end

export proc assign
    list int int -> list
do
    swp
    dup over(3) .length >=
    if
        "list index " print
        dup print
        " is less than length " print
        over(2) .length print
        "" println
        1 exit
    end
    8 *
    over(2) .data +
    swp
    set
end

export proc print
    list ->
do
    "[ " print
    dup .length
    0 while over over swp < then
        over(2) over index print
        " " print
        ++
    end
    "]" print
    pop pop pop
end

export proc println
    list ->
do
    print
    "" println
end


export proc range
    int -> list
do
    new_list swp
    0 while dup over(2) < then
        over(2) over push
        roll(3) pop rot rot
        ++
    end
    pop pop
end
